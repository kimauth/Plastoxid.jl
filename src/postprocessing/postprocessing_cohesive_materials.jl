################################################################
# Coupled cohesive zone
################################################################

function postprocess_material(
    Δ::Vec{dim}, 
    cᵍᵇ,
    material::CoupledKolluri,
    state::CoupledKolluriState{dim},
    old_state::CoupledKolluriState{dim},
    Δt::Float64,
) where dim
    
    (; Δₘₐₓ, cᵍᵇₘₐₓ) = state

    dn, dct, dt, dcn, do2 = damage_variables(material, state)
    dn_old, dct_old, dt_old, dcn_old, do2_old = damage_variables(material, old_state)
    ∂dn∂t, ∂dct∂t, ∂dt∂t, ∂dcn∂t, ∂do2∂t = damage_time_derivatives(material, dn, dct, dt, dcn, do2, dn_old, dct_old, dt_old, dcn_old, do2_old, Δt)
    ∂Ψ∂dn, ∂Ψ∂dct, ∂Ψ∂dt, ∂Ψ∂dcn, ∂Ψ∂do2 = damage_driving_forces(material, Δ, cᵍᵇ, dn, dct, dt, dcn, do2)

    𝔇 = dissipation(material, ∂Ψ∂dn, ∂Ψ∂dct, ∂Ψ∂dt, ∂Ψ∂dcn, ∂Ψ∂do2, ∂dn∂t, ∂dct∂t, ∂dt∂t, ∂dcn∂t, ∂do2∂t)

    d_mech = dn * dct * dt * dcn

    _T = T(material, Δ, Δₘₐₓ, cᵍᵇ, cᵍᵇₘₐₓ)
    _T̂ₙ = T̂ₙ(material, Δ, Δₘₐₓ, cᵍᵇₘₐₓ)

    return d_mech, do2, _T, _T̂ₙ, cᵍᵇ, state.cᵍᵇₘₐₓ, 𝔇
end

@inline pp_types(::Type{CoupledKolluri}, ::Type{<:AbstractDim{dim}}) where dim = (
    d_mech = Float64,
    d_o2 = Float64,
    T = Vec{dim, Float64},
    T̂ₙ = Float64,
    cᵍᵇ = Float64,
    cᵍᵇₘₐₓ = Float64,
    𝔇 = Float64
)

# could this be autogenerated?
function postprocess_material!(
    # preallocated matrices
    matrices,
    cellid,
    qp,
    # args
    Δ::Vec{dim}, 
    cᵍᵇ,
    material::CoupledKolluri,
    state::CoupledKolluriState{dim},
    old_state::CoupledKolluriState{dim},
    Δt::Float64,
) where dim
    d_mech, do2, _T, _T̂ₙ, cᵍᵇ, cᵍᵇₘₐₓ, 𝔇 = postprocess_material(Δ, cᵍᵇ, material, state, old_state, Δt::Float64)

    # set values into pre-allocated matrices
    matrices.d_mech[qp, cellid] = d_mech
    matrices.d_o2[qp, cellid] = do2
    matrices.T[qp, cellid] = _T
    matrices.T̂ₙ[qp, cellid] = _T̂ₙ
    matrices.cᵍᵇ[qp, cellid] = cᵍᵇ
    matrices.cᵍᵇₘₐₓ[qp, cellid] = cᵍᵇₘₐₓ
    matrices.𝔇[qp, cellid] = 𝔇

    return matrices
end