################################################################
# Elastic
################################################################

function postprocess_material(
    ε::SymmetricTensor{2,3}, 
    material::LinearElastic,
    state=nothing,
    Δt=nothing,
) where T

    σ = material.Eᵉ ⊡ ε

    εᵥₘ = von_mises_strain(ε)
    σᵥₘ = von_mises_stress(σ)

    return σᵥₘ, εᵥₘ
end

@inline pp_types(::Type{LinearElastic}, ::Type{<:AbstractDim{dim}}) where dim = (
    σᵥₘ = Float64,
    εᵥₘ = Float64
)

# could this be autogenerated?
function postprocess_material!(
    # preallocated matrices
    matrices,
    cellid,
    qp,
    # args
    ε::SymmetricTensor{2,3}, 
    material::LinearElastic,
    state,
    Δt,
)
    σᵥₘ, εᵥₘ = postprocess_material(ε, material, state, Δt)

    # set values into pre-allocated matrices
    matrices.σᵥₘ[qp, cellid] = σᵥₘ
    matrices.εᵥₘ[qp, cellid] = εᵥₘ

    return matrices
end

################################################################
# Plastic
################################################################

function postprocess_material(
    ε::SymmetricTensor{2,3}, 
    material::Plastic,
    state::PlasticState{3},
    Δt::Float64,
) where T
  
    σ, k, a = state_conjugates(ε, material, state)
    (; κ, α, μ) = state

    λ = μ / Δt
    dεᵖdt, dkdt, dadt = strain_rates(material, σ, κ, α, λ)

    𝔇 = dissipation(material, σ, κ, α, dεᵖdt, dkdt, dadt)

    εᵥₘ = von_mises_strain(ε)
    εᵖᵥₘ = von_mises_strain(εᵖ)

    σᵥₘ = von_mises_stress(σ)
    
    return σᵥₘ, εᵥₘ, εᵖᵥₘ, λ, 𝔇
end

@inline pp_types(::Type{Plastic}, ::Type{<:AbstractDim{dim}}) where dim = (
    σᵥₘ = Float64,
    εᵥₘ = Float64,
    εᵖᵥₘ = Float64,
    λ = Float64,
    𝔇 = Float64
)

# could this be autogenerated?
function postprocess_material!(
    # preallocated matrices
    matrices,
    cellid,
    qp,
    # args
    ε::SymmetricTensor{2,3}, 
    material::Plastic,
    state::PlasticState{3},
    Δt::Float64,
)
    σᵥₘ, εᵥₘ, εᵖᵥₘ, λ, 𝔇 = postprocess_material(ε, material, state, Δt)

    # set values into pre-allocated matrices
    matrices.σᵥₘ[qp, cellid] = σᵥₘ
    matrices.εᵥₘ[qp, cellid] = εᵥₘ
    matrices.εᵖᵥₘ[qp, cellid] = εᵖᵥₘ
    matrices.λ[qp, cellid] = λ
    matrices.𝔇[qp, cellid] = 𝔇

    return matrices
end

################################################################
# Crystal Plastic
################################################################
function postprocess_material(
    ε::SymmetricTensor{2,3}, 
    material::CrystalViscoPlastic,
    state::CrystalViscoPlasticState,
    Δt::Float64,
) 
  
    εᵖ, k, a = state_conjugates(ε, material, state)
    (; σ, κ, α, μ) = state

    λ = μ ./ Δt
    dεᵖdt, dkdt, dadt = strain_rates(material, σ, α, λ)

    𝔇 = dissipation(material, σ, κ, α, dεᵖdt, dkdt, dadt)

    εᵥₘ = von_mises_strain(ε)
    εᵖᵥₘ = von_mises_strain(εᵖ)

    σᵥₘ = von_mises_stress(σ)
    
    return σᵥₘ, εᵥₘ, εᵖᵥₘ, norm(λ), 𝔇
end

@inline pp_types(::Type{CrystalViscoPlastic{S}}, ::Type{<:AbstractDim{dim}}) where {S, dim} = (
    σᵥₘ = Float64,
    εᵥₘ = Float64,
    εᵖᵥₘ = Float64,
    λ = Float64,
    𝔇 = Float64
)

# could this be autogenerated?
function postprocess_material!(
    # preallocated matrices
    matrices,
    cellid,
    qp,
    # args
    ε::SymmetricTensor{2,3}, 
    material::CrystalViscoPlastic,
    state::CrystalViscoPlasticState,
    Δt::Float64,
)

    σᵥₘ, εᵥₘ, εᵖᵥₘ, λ, 𝔇 = postprocess_material(ε, material, state, Δt)

    # set values into pre-allocated matrices
    matrices.σᵥₘ[qp, cellid] = σᵥₘ
    matrices.εᵥₘ[qp, cellid] = εᵥₘ
    matrices.εᵖᵥₘ[qp, cellid] = εᵖᵥₘ
    matrices.λ[qp, cellid] = λ
    matrices.𝔇[qp, cellid] = 𝔇

    return matrices
end

###################################################
# shared utils
###################################################

function von_mises_stress(σ::AbstractTensor{2,3})
    return sqrt(3/2)*norm(dev(σ))
end

function von_mises_strain(ε::AbstractTensor{2,3})
    return sqrt(2/3)*norm(dev(ε))
end